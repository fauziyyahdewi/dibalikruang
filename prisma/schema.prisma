generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model client_finance {
  id                  Int               @id @default(autoincrement())
  user_id             Int?
  finance_category_id Int?
  amount              BigInt
  created_at          DateTime?         @default(now()) @db.Timestamp(6)
  updated_at          DateTime?         @default(now()) @db.Timestamp(6)
  finance_category    finance_category? @relation(fields: [finance_category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "client_finance_category_id_fkey")
}

model client_finance_detail {
  id                  Int               @id @default(autoincrement())
  user_id             Int?
  finance_category_id Int?
  finance_type_id     Int?
  name                String            @db.VarChar(255)
  amount              BigInt
  created_at          DateTime?         @default(now()) @db.Timestamp(6)
  updated_at          DateTime?         @default(now()) @db.Timestamp(6)
  finance_category    finance_category? @relation(fields: [finance_category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "client_finance_detail_finance_category_fkey")
  finance_type        finance_type?     @relation(fields: [finance_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "client_finance_detail_type_fkey")
}

model clients {
  id             Int       @id @default(autoincrement())
  user_id        Int?
  birthday       DateTime? @db.Timestamp(6)
  is_married     Boolean?
  responbilities Int?
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model finance_category {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(255)
  client_finance        client_finance[]
  client_finance_detail client_finance_detail[]
}

model finance_recommendation {
  id                 Int              @id @default(autoincrement())
  finance_type_id    Int?
  finance_subtype_id Int?
  name               String           @db.VarChar(255)
  finance_subtype    finance_subtype? @relation(fields: [finance_subtype_id], references: [id], onUpdate: NoAction, map: "finance_recommendation_subtype_fkey")
  finance_type       finance_type?    @relation(fields: [finance_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_recommendation_type_fkey")
}

model finance_subtype {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(255)
  finance_recommendation finance_recommendation[]
}

model finance_type {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(255)
  client_finance_detail  client_finance_detail[]
  finance_recommendation finance_recommendation[]
}

model financial_advisors {
  id              Int               @id @default(autoincrement())
  user_id         Int?
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @default(now()) @db.Timestamp(6)
  fincheck_result fincheck_result[]
}

model fincheck_result {
  id                     Int                      @id @default(autoincrement())
  user_id                Int?
  financial_advisor_id   Int?
  percent                Int
  description            String                   @db.VarChar(255)
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  updated_at             DateTime?                @default(now()) @db.Timestamp(6)
  financial_advisors     financial_advisors?      @relation(fields: [financial_advisor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  fincheck_result_detail fincheck_result_detail[]
}

model fincheck_result_detail {
  id                      Int                   @id @default(autoincrement())
  fincheck_result_id      Int?
  fincheck_result_type_id Int?
  result_category_id      Int?
  value                   Int
  description             String                @db.VarChar(255)
  created_at              DateTime?             @default(now()) @db.Timestamp(6)
  updated_at              DateTime?             @default(now()) @db.Timestamp(6)
  fincheck_result         fincheck_result?      @relation(fields: [fincheck_result_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  fincheck_result_type    fincheck_result_type? @relation(fields: [fincheck_result_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  result_category         result_category?      @relation(fields: [result_category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model fincheck_result_type {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(255)
  fincheck_result_detail fincheck_result_detail[]
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String
  options        String?
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement())
  queue        String @db.VarChar(255)
  payload      String
  attempts     Int    @db.SmallInt
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement())
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model result_category {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(255)
  fincheck_result_detail fincheck_result_detail[]
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt?
  ip_address    String? @db.VarChar(45)
  user_agent    String?
  payload       String
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model users {
  id                BigInt    @id @default(autoincrement())
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  image             String?   @db.VarChar(255)
  role              String    @default("user")
}
